// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RemoteCall.proto
#ifndef GRPC_RemoteCall_2eproto__INCLUDED
#define GRPC_RemoteCall_2eproto__INCLUDED

#include "RemoteCall.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace SDCS {

class RemoteCall final {
 public:
  static constexpr char const* service_full_name() {
    return "SDCS.RemoteCall";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::SDCS::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>> AsyncStore(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>>(AsyncStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>> PrepareAsyncStore(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>>(PrepareAsyncStoreRaw(context, request, cq));
    }
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::SDCS::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>> AsyncGet(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    virtual ::grpc::Status Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::SDCS::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>> AsyncRemove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>>(AsyncRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>> PrepareAsyncRemove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>>(PrepareAsyncRemoveRaw(context, request, cq));
    }
    virtual ::grpc::Status NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::SDCS::Reply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>> AsyncNotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>>(AsyncNotifyNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>> PrepareAsyncNotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>>(PrepareAsyncNotifyNextRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>* AsyncStoreRaw(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>* AsyncGetRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>* AsyncRemoveRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>* PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>* AsyncNotifyNextRaw(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SDCS::Reply>* PrepareAsyncNotifyNextRaw(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::SDCS::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>> AsyncStore(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>>(AsyncStoreRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>> PrepareAsyncStore(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>>(PrepareAsyncStoreRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::SDCS::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>> AsyncGet(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>> PrepareAsyncGet(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::SDCS::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>> AsyncRemove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>>(AsyncRemoveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>> PrepareAsyncRemove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>>(PrepareAsyncRemoveRaw(context, request, cq));
    }
    ::grpc::Status NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::SDCS::Reply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>> AsyncNotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>>(AsyncNotifyNextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>> PrepareAsyncNotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>>(PrepareAsyncNotifyNextRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)>) override;
      void Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)>) override;
      void Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)>) override;
      void NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* AsyncStoreRaw(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* AsyncGetRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* AsyncRemoveRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* AsyncNotifyNextRaw(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* PrepareAsyncNotifyNextRaw(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Store_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Remove_;
    const ::grpc::internal::RpcMethod rpcmethod_NotifyNext_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Store(::grpc::ServerContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response);
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response);
    virtual ::grpc::Status Remove(::grpc::ServerContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response);
    virtual ::grpc::Status NotifyNext(::grpc::ServerContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Store() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::SDCS::StoreRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::SDCS::StoreRequest* request, ::grpc::ServerAsyncResponseWriter< ::SDCS::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::SDCS::GetandRemoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::SDCS::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Remove() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemove(::grpc::ServerContext* context, ::SDCS::GetandRemoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::SDCS::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NotifyNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NotifyNext() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NotifyNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyNext(::grpc::ServerContext* /*context*/, const ::SDCS::EmptyMessage* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyNext(::grpc::ServerContext* context, ::SDCS::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::SDCS::Reply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Store<WithAsyncMethod_Get<WithAsyncMethod_Remove<WithAsyncMethod_NotifyNext<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Store() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::SDCS::StoreRequest, ::SDCS::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response) { return this->Store(context, request, response); }));}
    void SetMessageAllocatorFor_Store(
        ::grpc::MessageAllocator< ::SDCS::StoreRequest, ::SDCS::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SDCS::StoreRequest, ::SDCS::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::SDCS::StoreRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Store(
      ::grpc::CallbackServerContext* /*context*/, const ::SDCS::StoreRequest* /*request*/, ::SDCS::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::SDCS::GetandRemoveRequest, ::SDCS::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::SDCS::GetandRemoveRequest, ::SDCS::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SDCS::GetandRemoveRequest, ::SDCS::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Remove() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::SDCS::GetandRemoveRequest, ::SDCS::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response) { return this->Remove(context, request, response); }));}
    void SetMessageAllocatorFor_Remove(
        ::grpc::MessageAllocator< ::SDCS::GetandRemoveRequest, ::SDCS::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SDCS::GetandRemoveRequest, ::SDCS::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Remove(
      ::grpc::CallbackServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NotifyNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NotifyNext() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::SDCS::EmptyMessage, ::SDCS::Reply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response) { return this->NotifyNext(context, request, response); }));}
    void SetMessageAllocatorFor_NotifyNext(
        ::grpc::MessageAllocator< ::SDCS::EmptyMessage, ::SDCS::Reply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::SDCS::EmptyMessage, ::SDCS::Reply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NotifyNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyNext(::grpc::ServerContext* /*context*/, const ::SDCS::EmptyMessage* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyNext(
      ::grpc::CallbackServerContext* /*context*/, const ::SDCS::EmptyMessage* /*request*/, ::SDCS::Reply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Store<WithCallbackMethod_Get<WithCallbackMethod_Remove<WithCallbackMethod_NotifyNext<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Store() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::SDCS::StoreRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Remove() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NotifyNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NotifyNext() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NotifyNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyNext(::grpc::ServerContext* /*context*/, const ::SDCS::EmptyMessage* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Store() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::SDCS::StoreRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStore(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Remove() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemove(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NotifyNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NotifyNext() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NotifyNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyNext(::grpc::ServerContext* /*context*/, const ::SDCS::EmptyMessage* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotifyNext(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Store() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Store(context, request, response); }));
    }
    ~WithRawCallbackMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::SDCS::StoreRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Store(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Remove() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Remove(context, request, response); }));
    }
    ~WithRawCallbackMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Remove(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NotifyNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NotifyNext() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NotifyNext(context, request, response); }));
    }
    ~WithRawCallbackMethod_NotifyNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NotifyNext(::grpc::ServerContext* /*context*/, const ::SDCS::EmptyMessage* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NotifyNext(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Store : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Store() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SDCS::StoreRequest, ::SDCS::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SDCS::StoreRequest, ::SDCS::Reply>* streamer) {
                       return this->StreamedStore(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Store() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Store(::grpc::ServerContext* /*context*/, const ::SDCS::StoreRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SDCS::StoreRequest,::SDCS::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SDCS::GetandRemoveRequest, ::SDCS::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SDCS::GetandRemoveRequest, ::SDCS::Reply>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SDCS::GetandRemoveRequest,::SDCS::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Remove : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Remove() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SDCS::GetandRemoveRequest, ::SDCS::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SDCS::GetandRemoveRequest, ::SDCS::Reply>* streamer) {
                       return this->StreamedRemove(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Remove() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Remove(::grpc::ServerContext* /*context*/, const ::SDCS::GetandRemoveRequest* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemove(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SDCS::GetandRemoveRequest,::SDCS::Reply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NotifyNext : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NotifyNext() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::SDCS::EmptyMessage, ::SDCS::Reply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::SDCS::EmptyMessage, ::SDCS::Reply>* streamer) {
                       return this->StreamedNotifyNext(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NotifyNext() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NotifyNext(::grpc::ServerContext* /*context*/, const ::SDCS::EmptyMessage* /*request*/, ::SDCS::Reply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotifyNext(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::SDCS::EmptyMessage,::SDCS::Reply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Store<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Remove<WithStreamedUnaryMethod_NotifyNext<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Store<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Remove<WithStreamedUnaryMethod_NotifyNext<Service > > > > StreamedService;
};

}  // namespace SDCS


#endif  // GRPC_RemoteCall_2eproto__INCLUDED
