// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RemoteCall.proto

#include "RemoteCall.pb.h"
#include "RemoteCall.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace SDCS {

static const char* RemoteCall_method_names[] = {
  "/SDCS.RemoteCall/Store",
  "/SDCS.RemoteCall/Get",
  "/SDCS.RemoteCall/Remove",
  "/SDCS.RemoteCall/NotifyNext",
};

std::unique_ptr< RemoteCall::Stub> RemoteCall::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RemoteCall::Stub> stub(new RemoteCall::Stub(channel, options));
  return stub;
}

RemoteCall::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Store_(RemoteCall_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(RemoteCall_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(RemoteCall_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NotifyNext_(RemoteCall_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RemoteCall::Stub::Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::SDCS::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SDCS::StoreRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Store_, context, request, response);
}

void RemoteCall::Stub::async::Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SDCS::StoreRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, std::move(f));
}

void RemoteCall::Stub::async::Store(::grpc::ClientContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* RemoteCall::Stub::PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SDCS::Reply, ::SDCS::StoreRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Store_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* RemoteCall::Stub::AsyncStoreRaw(::grpc::ClientContext* context, const ::SDCS::StoreRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteCall::Stub::Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::SDCS::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SDCS::GetandRemoveRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void RemoteCall::Stub::async::Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SDCS::GetandRemoveRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void RemoteCall::Stub::async::Get(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* RemoteCall::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SDCS::Reply, ::SDCS::GetandRemoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* RemoteCall::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteCall::Stub::Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::SDCS::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SDCS::GetandRemoveRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void RemoteCall::Stub::async::Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SDCS::GetandRemoveRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void RemoteCall::Stub::async::Remove(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* RemoteCall::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SDCS::Reply, ::SDCS::GetandRemoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Remove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* RemoteCall::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::SDCS::GetandRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RemoteCall::Stub::NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::SDCS::Reply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SDCS::EmptyMessage, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NotifyNext_, context, request, response);
}

void RemoteCall::Stub::async::NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SDCS::EmptyMessage, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyNext_, context, request, response, std::move(f));
}

void RemoteCall::Stub::async::NotifyNext(::grpc::ClientContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NotifyNext_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* RemoteCall::Stub::PrepareAsyncNotifyNextRaw(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SDCS::Reply, ::SDCS::EmptyMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NotifyNext_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SDCS::Reply>* RemoteCall::Stub::AsyncNotifyNextRaw(::grpc::ClientContext* context, const ::SDCS::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNotifyNextRaw(context, request, cq);
  result->StartCall();
  return result;
}

RemoteCall::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteCall_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteCall::Service, ::SDCS::StoreRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteCall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SDCS::StoreRequest* req,
             ::SDCS::Reply* resp) {
               return service->Store(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteCall_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteCall::Service, ::SDCS::GetandRemoveRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteCall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SDCS::GetandRemoveRequest* req,
             ::SDCS::Reply* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteCall_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteCall::Service, ::SDCS::GetandRemoveRequest, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteCall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SDCS::GetandRemoveRequest* req,
             ::SDCS::Reply* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RemoteCall_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RemoteCall::Service, ::SDCS::EmptyMessage, ::SDCS::Reply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RemoteCall::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SDCS::EmptyMessage* req,
             ::SDCS::Reply* resp) {
               return service->NotifyNext(ctx, req, resp);
             }, this)));
}

RemoteCall::Service::~Service() {
}

::grpc::Status RemoteCall::Service::Store(::grpc::ServerContext* context, const ::SDCS::StoreRequest* request, ::SDCS::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteCall::Service::Get(::grpc::ServerContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteCall::Service::Remove(::grpc::ServerContext* context, const ::SDCS::GetandRemoveRequest* request, ::SDCS::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RemoteCall::Service::NotifyNext(::grpc::ServerContext* context, const ::SDCS::EmptyMessage* request, ::SDCS::Reply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace SDCS

